//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntegrateGoogleSignIn.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBEntities : DbContext
    {
        public DBEntities()
            : base("name=DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AdminDomain> AdminDomains { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<ExtraUser> ExtraUsers { get; set; }
        public virtual DbSet<ExtraUserAgreementCollection> ExtraUserAgreementCollections { get; set; }
        public virtual DbSet<ExtraUserSubscriptionPlan> ExtraUserSubscriptionPlans { get; set; }
        public virtual DbSet<GoogleAgreementCollection> GoogleAgreementCollections { get; set; }
        public virtual DbSet<GoogleSubscribePlan> GoogleSubscribePlans { get; set; }
        public virtual DbSet<GoogleUser> GoogleUsers { get; set; }
        public virtual DbSet<loginhistory> loginhistories { get; set; }
        public virtual DbSet<paymentdetail> paymentdetails { get; set; }
        public virtual DbSet<ProAgreementCollection> ProAgreementCollections { get; set; }
        public virtual DbSet<Profile> Profiles { get; set; }
        public virtual DbSet<propackageuser> propackageusers { get; set; }
        public virtual DbSet<ProSubscriptionPlan> ProSubscriptionPlans { get; set; }
        public virtual DbSet<searchdomainMaster> searchdomainMasters { get; set; }
        public virtual DbSet<searchMaster> searchMasters { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserTable> UserTables { get; set; }
        public virtual DbSet<VisitorData> VisitorDatas { get; set; }
        public virtual DbSet<WebProperty> WebProperties { get; set; }
        public virtual DbSet<specialuser> specialusers { get; set; }
        public virtual DbSet<UserSession> UserSessions { get; set; }
        public virtual DbSet<dailycolourcollection> dailycolourcollections { get; set; }
        public virtual DbSet<Dailycollection_source> Dailycollection_source { get; set; }
        public virtual DbSet<sourceReportData> sourceReportDatas { get; set; }
        public virtual DbSet<TagReportData> TagReportDatas { get; set; }
        public virtual DbSet<UserDailyAnalytic> UserDailyAnalytics { get; set; }
    
        public virtual ObjectResult<dashboard_Result> dashboard(Nullable<int> id, string domainName, string userIP, string source, string location, string mode)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var domainNameParameter = domainName != null ?
                new ObjectParameter("DomainName", domainName) :
                new ObjectParameter("DomainName", typeof(string));
    
            var userIPParameter = userIP != null ?
                new ObjectParameter("UserIP", userIP) :
                new ObjectParameter("UserIP", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dashboard_Result>("dashboard", idParameter, domainNameParameter, userIPParameter, sourceParameter, locationParameter, modeParameter);
        }
    
        public virtual ObjectResult<string> sppropackageuser(Nullable<int> id, string name, string email, string mobile_no, string password, string domainname, string mode)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var mobile_noParameter = mobile_no != null ?
                new ObjectParameter("mobile_no", mobile_no) :
                new ObjectParameter("mobile_no", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var domainnameParameter = domainname != null ?
                new ObjectParameter("domainname", domainname) :
                new ObjectParameter("domainname", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sppropackageuser", idParameter, nameParameter, emailParameter, mobile_noParameter, passwordParameter, domainnameParameter, modeParameter);
        }
    
        public virtual ObjectResult<spuserdetiles_Result> spuserdetiles(Nullable<int> id, Nullable<int> userId, Nullable<System.DateTime> sessionDateTime, string startUrl, string endUrl, Nullable<int> userSessionId, string pageTitle, string mode)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var sessionDateTimeParameter = sessionDateTime.HasValue ?
                new ObjectParameter("SessionDateTime", sessionDateTime) :
                new ObjectParameter("SessionDateTime", typeof(System.DateTime));
    
            var startUrlParameter = startUrl != null ?
                new ObjectParameter("StartUrl", startUrl) :
                new ObjectParameter("StartUrl", typeof(string));
    
            var endUrlParameter = endUrl != null ?
                new ObjectParameter("EndUrl", endUrl) :
                new ObjectParameter("EndUrl", typeof(string));
    
            var userSessionIdParameter = userSessionId.HasValue ?
                new ObjectParameter("UserSessionId", userSessionId) :
                new ObjectParameter("UserSessionId", typeof(int));
    
            var pageTitleParameter = pageTitle != null ?
                new ObjectParameter("PageTitle", pageTitle) :
                new ObjectParameter("PageTitle", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spuserdetiles_Result>("spuserdetiles", idParameter, userIdParameter, sessionDateTimeParameter, startUrlParameter, endUrlParameter, userSessionIdParameter, pageTitleParameter, modeParameter);
        }
    
        public virtual int usp_Accounts_Insert(string id, string username, string name)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Accounts_Insert", idParameter, usernameParameter, nameParameter);
        }
    
        public virtual int usp_LoginData_Insert(string username, string name, string authtype)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var authtypeParameter = authtype != null ?
                new ObjectParameter("authtype", authtype) :
                new ObjectParameter("authtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LoginData_Insert", usernameParameter, nameParameter, authtypeParameter);
        }
    
        public virtual int usp_Profile_Insert(string id, string webPropertyId, string name)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var webPropertyIdParameter = webPropertyId != null ?
                new ObjectParameter("webPropertyId", webPropertyId) :
                new ObjectParameter("webPropertyId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Profile_Insert", idParameter, webPropertyIdParameter, nameParameter);
        }
    
        public virtual int usp_VisitorData_Insert(Nullable<System.DateTime> date, string profileId, string data)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var profileIdParameter = profileId != null ?
                new ObjectParameter("profileId", profileId) :
                new ObjectParameter("profileId", typeof(string));
    
            var dataParameter = data != null ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_VisitorData_Insert", dateParameter, profileIdParameter, dataParameter);
        }
    
        public virtual int usp_WebProperty_Insert(string id, string accountId, string name)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var accountIdParameter = accountId != null ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_WebProperty_Insert", idParameter, accountIdParameter, nameParameter);
        }
    }
}
